<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2019
 *
 * Generated from xml/schema/CRM/Civigiftaid/BatchSettings.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:03e9148920c213359a8b1d1335dfc451)
 */

/**
 * Database access object for the BatchSettings entity.
 */
class CRM_Civigiftaid_DAO_BatchSettings extends CRM_Core_DAO {

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_civigiftaid_batchsettings';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique BatchSettings ID
   *
   * @var int unsigned
   */
  public $id;

  /**
   * FK to Batch
   *
   * @var int unsigned
   */
  public $batch_id;

  /**
   * Financial type enabled for this batch
   *
   * @var text
   */
  public $financial_types_enabled;

  /**
   * Globally enabled for this batch
   *
   * @var boolean
   */
  public $globally_enabled;

  /**
   * Basic rate tax for the batch.
   *
   * @var decimal(4,2)
   */
  public $basic_rate_tax;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_civigiftaid_batchsettings';
    parent::__construct();
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'batch_id', 'civicrm_batch', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => ts('Unique BatchSettings ID'),
          'required' => TRUE,
          'where' => 'civicrm_civigiftaid_batchsettings.id',
          'table_name' => 'civicrm_civigiftaid_batchsettings',
          'entity' => 'BatchSettings',
          'bao' => 'CRM_Civigiftaid_DAO_BatchSettings',
          'localizable' => 0,
        ],
        'batch_id' => [
          'name' => 'batch_id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => ts('FK to Batch'),
          'where' => 'civicrm_civigiftaid_batchsettings.batch_id',
          'table_name' => 'civicrm_civigiftaid_batchsettings',
          'entity' => 'BatchSettings',
          'bao' => 'CRM_Civigiftaid_DAO_BatchSettings',
          'localizable' => 0,
          'FKClassName' => 'CRM_Batch_DAO_Batch',
        ],
        'financial_types_enabled' => [
          'name' => 'financial_types_enabled',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => ts('Financial Types Enabled'),
          'description' => ts('Financial type enabled for this batch'),
          'where' => 'civicrm_civigiftaid_batchsettings.financial_types_enabled',
          'table_name' => 'civicrm_civigiftaid_batchsettings',
          'entity' => 'BatchSettings',
          'bao' => 'CRM_Civigiftaid_DAO_BatchSettings',
          'localizable' => 0,
        ],
        'globally_enabled' => [
          'name' => 'globally_enabled',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('Globally Enabled'),
          'description' => ts('Globally enabled for this batch'),
          'where' => 'civicrm_civigiftaid_batchsettings.globally_enabled',
          'table_name' => 'civicrm_civigiftaid_batchsettings',
          'entity' => 'BatchSettings',
          'bao' => 'CRM_Civigiftaid_DAO_BatchSettings',
          'localizable' => 0,
        ],
        'basic_rate_tax' => [
          'name' => 'basic_rate_tax',
          'type' => CRM_Utils_Type::T_DECIMAL(4, 2),
          'title' => ts('Basic Rate Tax'),
          'description' => ts('Basic rate tax for the batch.'),
          'where' => 'civicrm_civigiftaid_batchsettings.basic_rate_tax',
          'table_name' => 'civicrm_civigiftaid_batchsettings',
          'entity' => 'BatchSettings',
          'bao' => 'CRM_Civigiftaid_DAO_BatchSettings',
          'localizable' => 0,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'civigiftaid_batchsettings', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'civigiftaid_batchsettings', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
